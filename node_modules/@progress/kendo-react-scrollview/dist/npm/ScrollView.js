"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScrollView = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var package_metadata_1 = require("./package-metadata");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * Represents the [KendoReact ScrollView component]({% slug overview_scrollview %}).
 *
 * @example
 * ```jsx
 * const App = () => {
 *   const items: any[] = [
 *     { position: 1, url: 'https://demos.telerik.com/kendo-ui/content/web/scrollview/image1.jpg' },
 *     { position: 2, url: 'https://demos.telerik.com/kendo-ui/content/web/scrollview/image2.jpg' },
 *     { position: 3, url: 'https://demos.telerik.com/kendo-ui/content/web/scrollview/image3.jpg' }
 *   ];
 *   return (
 *     <ScrollView style={{width: 512, height: 384}}>
 *       {items.map((item, index) => {
 *         return (
 *           <div className="image-with-text" key={index}>
 *             <p>Showing image {item.position} of {items.length}.</p>
 *             <img
 *               src={item.url}
 *               alt={'Photo'}
 *               style={{width: 512, height: 384}}
 *               draggable={false}
 *             />
 *           </div>
 *         );
 *       })}
 *     </ScrollView>
 *   );
 * };
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
exports.ScrollView = React.forwardRef(function (props, target) {
    (0, kendo_react_common_2.validatePackage)(package_metadata_1.packageMetadata);
    var className = props.className, style = props.style, children = props.children, pagerOverlay = props.pagerOverlay, pageable = props.pageable, arrows = props.arrows, endless = props.endless, activeView = props.activeView, automaticViewChange = props.automaticViewChange, automaticViewChangeInterval = props.automaticViewChangeInterval;
    var _a = React.useState(activeView || 1), active = _a[0], setActive = _a[1];
    var elementRef = React.useRef(null);
    var wrapElementRef = React.useRef(null);
    var timeoutRef = React.useRef(null);
    var data = React.Children.toArray(children);
    var dir = (0, kendo_react_common_1.useRtl)(elementRef, props.dir);
    var isRtl = dir === 'rtl';
    var focusElement = React.useCallback(function () {
        if (elementRef.current) {
            elementRef.current.focus();
        }
    }, []);
    var getImperativeHandle = React.useCallback(function () { return ({
        element: elementRef.current,
        focus: focusElement
    }); }, [focusElement]);
    React.useImperativeHandle(target, getImperativeHandle);
    var prev = React.useCallback(function () {
        if (!endless) {
            active > 1 && setActive(active - 1);
        }
        else {
            active > 1 ? setActive(active - 1) : setActive(data.length);
        }
    }, [active, data.length, endless]);
    var next = React.useCallback(function () {
        if (!endless) {
            active < data.length && setActive(active + 1);
        }
        else {
            active < data.length ? setActive(active + 1) : setActive(1);
        }
    }, [active, data.length, endless]);
    React.useEffect(function () {
        var viewsCount = data.length;
        if (wrapElementRef.current) {
            wrapElementRef.current.style.setProperty('--kendo-scrollview-views', "".concat(viewsCount));
            wrapElementRef.current.style.setProperty('--kendo-scrollview-current', "".concat(active));
        }
    }, [data, active, dir]);
    function resetTimeout() {
        if (timeoutRef.current) {
            clearTimeout(timeoutRef.current);
        }
    }
    React.useEffect(function () {
        if (automaticViewChange) {
            resetTimeout();
            timeoutRef.current = setTimeout(function () { return setActive(function (prevIndex) { return prevIndex === data.length ?
                endless ?
                    1 :
                    prevIndex
                : prevIndex + 1; }); }, automaticViewChangeInterval);
            return function () {
                resetTimeout();
            };
        }
    }, [automaticViewChange, automaticViewChangeInterval, data.length, active, endless]);
    var handleKeyDown = React.useCallback(function (event) {
        switch (event.keyCode) {
            case kendo_react_common_1.Keys.left:
                event.preventDefault();
                if (!isRtl) {
                    prev();
                }
                else {
                    next();
                }
                break;
            case kendo_react_common_1.Keys.right:
                event.preventDefault();
                if (!isRtl) {
                    next();
                }
                else {
                    prev();
                }
                break;
            default:
                break;
        }
    }, [isRtl, next, prev]);
    var scrollViewClasses = React.useMemo(function () { return (0, kendo_react_common_1.classNames)('k-scrollview', {
        'k-scrollview-light': pagerOverlay === 'light',
        'k-scrollview-dark': pagerOverlay === 'dark'
    }, className); }, [className, pagerOverlay]);
    var content = React.Children.map(children || null, function (child, index) { return (React.createElement("div", { className: "k-scrollview-view", "aria-hidden": active === index + 1 ? false : true }, child)); });
    var displayLeftArrow = React.useCallback(function () {
        var isNotBorderItem;
        isNotBorderItem = active > 1;
        return (endless || isNotBorderItem) && data.length > 0;
    }, [active, data.length, endless]);
    var displayRightArrow = React.useCallback(function () {
        var isNotBorderItem;
        isNotBorderItem = active < data.length;
        return (endless || isNotBorderItem) && data.length > 0;
    }, [active, data.length, endless]);
    return (React.createElement("div", { className: scrollViewClasses, style: style, ref: elementRef, tabIndex: 0, dir: dir, onKeyDown: handleKeyDown },
        React.createElement("div", { className: "k-scrollview-wrap k-scrollview-animate", ref: wrapElementRef }, content),
        React.createElement("div", { className: "k-scrollview-elements" },
            arrows && (React.createElement(React.Fragment, null,
                displayLeftArrow() && React.createElement("span", { className: "k-scrollview-prev", "aria-label": "previous", onClick: prev },
                    React.createElement(kendo_react_common_1.IconWrap, { name: isRtl ? 'chevron-right' : 'chevron-left', icon: isRtl ? kendo_svg_icons_1.chevronRightIcon : kendo_svg_icons_1.chevronLeftIcon, size: 'xxxlarge' })),
                displayRightArrow() && React.createElement("span", { className: "k-scrollview-next", onClick: next },
                    React.createElement(kendo_react_common_1.IconWrap, { name: isRtl ? 'chevron-left' : 'chevron-right', icon: isRtl ? kendo_svg_icons_1.chevronLeftIcon : kendo_svg_icons_1.chevronRightIcon, size: 'xxxlarge' })))),
            pageable && (React.createElement("div", { className: "k-scrollview-nav-wrap" },
                React.createElement("div", { className: "k-scrollview-nav" }, data.map(function (_, index) {
                    return (React.createElement("span", { className: (0, kendo_react_common_1.classNames)('k-link', {
                            'k-primary': active === index + 1
                        }), key: index + 1, onClick: function () { return setActive(index + 1); } }));
                })))))));
});
exports.ScrollView.propTypes = {
    activeView: PropTypes.number,
    arrows: PropTypes.bool,
    automaticViewChange: PropTypes.bool,
    automaticViewChangeInterval: PropTypes.number,
    children: PropTypes.any,
    className: PropTypes.string,
    dir: PropTypes.string,
    endless: PropTypes.bool,
    pageable: PropTypes.bool,
    pageOverlay: PropTypes.string,
    style: PropTypes.object
};
var defaultProps = {
    activeView: 1,
    arrows: true,
    automaticViewChange: true,
    automaticViewChangeInterval: 5000,
    endless: false,
    pageable: true,
    pageOverlay: 'none'
};
exports.ScrollView.defaultProps = defaultProps;
exports.ScrollView.displayName = 'KendoScrollView';
