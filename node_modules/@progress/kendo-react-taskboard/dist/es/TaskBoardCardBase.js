var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Card } from '@progress/kendo-react-layout';
import { TASKBOARD_PLACEHOLDER } from './constants';
import { useLocalization } from '@progress/kendo-react-intl';
import { messages, taskBoardDeleteTaskDialogMessage, taskBoardDeleteTaskDialogTitle, taskBoardDeleteTaskConfirmButton, taskBoardDeleteTaskCancelButton, taskBoardEditCardButton, taskBoardDeleteCardButton, taskBoardPreviewPanePriorityLabel, taskBoardPreviewPaneDeleteBtn, taskBoardPreviewPaneEditBtn } from './messages';
import { TaskBoardCardHeader } from './card/CardHeader';
import { TaskBoardCardBody } from './card/CardBody';
import { TaskBoardConfirmDialog } from './TaskBoardConfirmDialog';
import { TaskBoardPreviewDialog } from './card/PreviewDialog';
import { pencilIcon, trashIcon } from '@progress/kendo-svg-icons';
/**
 * Represents the TaskBoardCardBase component.
 *
 * @hidden
 */
export var TaskBoardCardBase = function (props) {
    var _a;
    var onDeleteTask = props.onDeleteTask, showEditPane = props.showEditPane, task = props.task, style = props.style, dragTargetRef = props.dragTargetRef, elementRef = props.elementRef;
    var _b = React.useState(false), optionMenuVisible = _b[0], setOptionMenuVisible = _b[1];
    var _c = React.useState(false), confirmTaskDeleteVisible = _c[0], setConfirmTaskDeleteVisible = _c[1];
    var _d = React.useState(false), showTaskPreviewPane = _d[0], setShowTaskPreviewPane = _d[1];
    var popupRef = React.useRef(null);
    var localization = useLocalization();
    var optionButtons = [
        {
            text: localization.toLanguageString(taskBoardEditCardButton, messages[taskBoardEditCardButton]),
            icon: 'pencil',
            svgIcon: pencilIcon,
            data: function () {
                showEditPane(task);
                setOptionMenuVisible(!optionMenuVisible);
            }
        },
        {
            text: localization.toLanguageString(taskBoardDeleteCardButton, messages[taskBoardDeleteCardButton]),
            icon: 'trash',
            svgIcon: trashIcon,
            data: function () {
                setConfirmTaskDeleteVisible(!confirmTaskDeleteVisible);
                setOptionMenuVisible(!optionMenuVisible);
            }
        }
    ];
    var handleSelect = function (e) {
        e.item.data();
    };
    var onShowMenu = function () {
        setOptionMenuVisible(true);
    };
    var onHideMenu = function () {
        setOptionMenuVisible(false);
    };
    var onMenuButtonBlur = function (event) {
        var popup = popupRef.current && popupRef.current.element;
        if (popup && popup.contains(event.relatedTarget)) {
            return;
        }
        setOptionMenuVisible(false);
    };
    var closeConfirmDialog = function () {
        setConfirmTaskDeleteVisible(!confirmTaskDeleteVisible);
    };
    var onShowTaskPreviewPane = function () {
        setShowTaskPreviewPane(true);
    };
    var onClosePreviewPane = function () {
        setShowTaskPreviewPane(false);
    };
    var onTaskEdit = function () {
        showEditPane(task);
        onShowTaskPreviewPane();
    };
    if (task.isPlaceholder && dragTargetRef && dragTargetRef.current) {
        return (React.createElement("div", __assign({ style: { width: dragTargetRef.current.width, height: dragTargetRef.current.height }, className: 'k-taskboard-drag-placeholder' }, (_a = {}, _a[TASKBOARD_PLACEHOLDER] = true, _a))));
    }
    return (React.createElement(props.cardComponent, { task: task, style: style, tabIndex: props.tabIndex, disabled: props.disabled, elementRef: elementRef, showMenu: optionMenuVisible, showDeleteConfirm: confirmTaskDeleteVisible, showTaskPreviewPane: showTaskPreviewPane, menuItems: optionButtons, popupRef: popupRef, confirmDialogMessage: localization.toLanguageString(taskBoardDeleteTaskDialogMessage, messages[taskBoardDeleteTaskDialogMessage]), confirmDialogTitle: localization.toLanguageString(taskBoardDeleteTaskDialogTitle, messages[taskBoardDeleteTaskDialogTitle]), confirmDialogConfirmButton: localization.toLanguageString(taskBoardDeleteTaskConfirmButton, messages[taskBoardDeleteTaskConfirmButton]), confirmDialogCancelButton: localization.toLanguageString(taskBoardDeleteTaskCancelButton, messages[taskBoardDeleteTaskCancelButton]), previewDialogPriorityLabel: localization.toLanguageString(taskBoardPreviewPanePriorityLabel, messages[taskBoardPreviewPanePriorityLabel]), previewDialogDelete: localization.toLanguageString(taskBoardPreviewPaneDeleteBtn, messages[taskBoardPreviewPaneDeleteBtn]), previewDialogEdit: localization.toLanguageString(taskBoardPreviewPaneEditBtn, messages[taskBoardPreviewPaneEditBtn]), onShowPreviewPane: onShowTaskPreviewPane, onClosePreviewPane: onClosePreviewPane, onMenuItemSelect: handleSelect, onShowMenu: onShowMenu, onHideMenu: onHideMenu, onMenuButtonBlur: onMenuButtonBlur, onTaskDelete: onDeleteTask, onTaskEdit: onTaskEdit, onCloseConfirmDialog: closeConfirmDialog, card: Card, cardHeader: TaskBoardCardHeader, cardBody: TaskBoardCardBody, confirmDialog: TaskBoardConfirmDialog, previewDialog: TaskBoardPreviewDialog }));
};
var defaultProps = {};
TaskBoardCardBase.propTypes = {
    task: PropTypes.object.isRequired
};
TaskBoardCardBase.defaultProps = defaultProps;
TaskBoardCardBase.displayName = 'KendoReactTaskBoardCardBase';
