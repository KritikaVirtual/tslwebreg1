"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskBoardCardBase = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_layout_1 = require("@progress/kendo-react-layout");
var constants_1 = require("./constants");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("./messages");
var CardHeader_1 = require("./card/CardHeader");
var CardBody_1 = require("./card/CardBody");
var TaskBoardConfirmDialog_1 = require("./TaskBoardConfirmDialog");
var PreviewDialog_1 = require("./card/PreviewDialog");
var kendo_svg_icons_1 = require("@progress/kendo-svg-icons");
/**
 * Represents the TaskBoardCardBase component.
 *
 * @hidden
 */
var TaskBoardCardBase = function (props) {
    var _a;
    var onDeleteTask = props.onDeleteTask, showEditPane = props.showEditPane, task = props.task, style = props.style, dragTargetRef = props.dragTargetRef, elementRef = props.elementRef;
    var _b = React.useState(false), optionMenuVisible = _b[0], setOptionMenuVisible = _b[1];
    var _c = React.useState(false), confirmTaskDeleteVisible = _c[0], setConfirmTaskDeleteVisible = _c[1];
    var _d = React.useState(false), showTaskPreviewPane = _d[0], setShowTaskPreviewPane = _d[1];
    var popupRef = React.useRef(null);
    var localization = (0, kendo_react_intl_1.useLocalization)();
    var optionButtons = [
        {
            text: localization.toLanguageString(messages_1.taskBoardEditCardButton, messages_1.messages[messages_1.taskBoardEditCardButton]),
            icon: 'pencil',
            svgIcon: kendo_svg_icons_1.pencilIcon,
            data: function () {
                showEditPane(task);
                setOptionMenuVisible(!optionMenuVisible);
            }
        },
        {
            text: localization.toLanguageString(messages_1.taskBoardDeleteCardButton, messages_1.messages[messages_1.taskBoardDeleteCardButton]),
            icon: 'trash',
            svgIcon: kendo_svg_icons_1.trashIcon,
            data: function () {
                setConfirmTaskDeleteVisible(!confirmTaskDeleteVisible);
                setOptionMenuVisible(!optionMenuVisible);
            }
        }
    ];
    var handleSelect = function (e) {
        e.item.data();
    };
    var onShowMenu = function () {
        setOptionMenuVisible(true);
    };
    var onHideMenu = function () {
        setOptionMenuVisible(false);
    };
    var onMenuButtonBlur = function (event) {
        var popup = popupRef.current && popupRef.current.element;
        if (popup && popup.contains(event.relatedTarget)) {
            return;
        }
        setOptionMenuVisible(false);
    };
    var closeConfirmDialog = function () {
        setConfirmTaskDeleteVisible(!confirmTaskDeleteVisible);
    };
    var onShowTaskPreviewPane = function () {
        setShowTaskPreviewPane(true);
    };
    var onClosePreviewPane = function () {
        setShowTaskPreviewPane(false);
    };
    var onTaskEdit = function () {
        showEditPane(task);
        onShowTaskPreviewPane();
    };
    if (task.isPlaceholder && dragTargetRef && dragTargetRef.current) {
        return (React.createElement("div", __assign({ style: { width: dragTargetRef.current.width, height: dragTargetRef.current.height }, className: 'k-taskboard-drag-placeholder' }, (_a = {}, _a[constants_1.TASKBOARD_PLACEHOLDER] = true, _a))));
    }
    return (React.createElement(props.cardComponent, { task: task, style: style, tabIndex: props.tabIndex, disabled: props.disabled, elementRef: elementRef, showMenu: optionMenuVisible, showDeleteConfirm: confirmTaskDeleteVisible, showTaskPreviewPane: showTaskPreviewPane, menuItems: optionButtons, popupRef: popupRef, confirmDialogMessage: localization.toLanguageString(messages_1.taskBoardDeleteTaskDialogMessage, messages_1.messages[messages_1.taskBoardDeleteTaskDialogMessage]), confirmDialogTitle: localization.toLanguageString(messages_1.taskBoardDeleteTaskDialogTitle, messages_1.messages[messages_1.taskBoardDeleteTaskDialogTitle]), confirmDialogConfirmButton: localization.toLanguageString(messages_1.taskBoardDeleteTaskConfirmButton, messages_1.messages[messages_1.taskBoardDeleteTaskConfirmButton]), confirmDialogCancelButton: localization.toLanguageString(messages_1.taskBoardDeleteTaskCancelButton, messages_1.messages[messages_1.taskBoardDeleteTaskCancelButton]), previewDialogPriorityLabel: localization.toLanguageString(messages_1.taskBoardPreviewPanePriorityLabel, messages_1.messages[messages_1.taskBoardPreviewPanePriorityLabel]), previewDialogDelete: localization.toLanguageString(messages_1.taskBoardPreviewPaneDeleteBtn, messages_1.messages[messages_1.taskBoardPreviewPaneDeleteBtn]), previewDialogEdit: localization.toLanguageString(messages_1.taskBoardPreviewPaneEditBtn, messages_1.messages[messages_1.taskBoardPreviewPaneEditBtn]), onShowPreviewPane: onShowTaskPreviewPane, onClosePreviewPane: onClosePreviewPane, onMenuItemSelect: handleSelect, onShowMenu: onShowMenu, onHideMenu: onHideMenu, onMenuButtonBlur: onMenuButtonBlur, onTaskDelete: onDeleteTask, onTaskEdit: onTaskEdit, onCloseConfirmDialog: closeConfirmDialog, card: kendo_react_layout_1.Card, cardHeader: CardHeader_1.TaskBoardCardHeader, cardBody: CardBody_1.TaskBoardCardBody, confirmDialog: TaskBoardConfirmDialog_1.TaskBoardConfirmDialog, previewDialog: PreviewDialog_1.TaskBoardPreviewDialog }));
};
exports.TaskBoardCardBase = TaskBoardCardBase;
var defaultProps = {};
exports.TaskBoardCardBase.propTypes = {
    task: PropTypes.object.isRequired
};
exports.TaskBoardCardBase.defaultProps = defaultProps;
exports.TaskBoardCardBase.displayName = 'KendoReactTaskBoardCardBase';
