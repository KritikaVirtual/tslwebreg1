"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskBoardColumnBase = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("./messages");
var constants_1 = require("./constants");
var ColumnHeader_1 = require("./column/ColumnHeader");
var ColumnBody_1 = require("./column/ColumnBody");
var TaskBoardConfirmDialog_1 = require("./TaskBoardConfirmDialog");
var TaskBoardEditCard_1 = require("./TaskBoardEditCard");
var TaskBoardAddCard_1 = require("./TaskBoardAddCard");
var TaskBoardCardBase_1 = require("./TaskBoardCardBase");
/**
 * Represents the TaskBoardColumnBase component.
 *
 * @hidden
 */
var TaskBoardColumnBase = function (props) {
    var _a;
    var _b = React.useState(false), addCard = _b[0], setAddCard = _b[1];
    var _c = React.useState(false), editCardPane = _c[0], setEditCardPane = _c[1];
    var _d = React.useState(false), confirmColumnDeleteVisible = _d[0], setConfirmColumnDeleteVisible = _d[1];
    var _e = React.useState(), taskToEdit = _e[0], setTaskToEdit = _e[1];
    var dragTargetRef = props.dragTargetRef, column = props.column, onColumnChange = props.onColumnChange, tasks = props.tasks, elementRef = props.elementRef, style = props.style, onTaskCreate = props.onTaskCreate, onTaskEdit = props.onTaskEdit, onTaskDelete = props.onTaskDelete;
    var localization = (0, kendo_react_intl_1.useLocalization)();
    var onTitleChange = React.useCallback(function (e) {
        var newColumn = __assign(__assign({}, column), { title: e.value });
        onColumnChange.call(undefined, newColumn, column);
    }, [column, onColumnChange]);
    var onColumnEnterEdit = React.useCallback(function () {
        var newColumn = __assign(__assign({}, column), { edit: true });
        onColumnChange.call(undefined, newColumn, column);
    }, [column, onColumnChange]);
    var onColumnExitEdit = React.useCallback(function () {
        var newColumn = __assign(__assign({}, column), { edit: false });
        onColumnChange.call(undefined, newColumn, column);
    }, [column, onColumnChange]);
    var onConfirmColumnDelete = React.useCallback(function () {
        var newColumn = null;
        onColumnChange.call(undefined, newColumn, column);
    }, [column, onColumnChange]);
    var onColumnDelete = function () {
        setConfirmColumnDeleteVisible(!confirmColumnDeleteVisible);
    };
    var showAddCardDialog = function () {
        setAddCard(true);
    };
    var showEditCardPane = function (task) {
        setEditCardPane(true);
        setTaskToEdit(task);
    };
    var hideCloseModal = function () {
        setAddCard(false);
        setEditCardPane(false);
    };
    var onNewTask = React.useCallback(function (task) {
        setAddCard(false);
        onTaskCreate.call(undefined, __assign(__assign({}, task), { status: column.status }));
    }, [onTaskCreate, column]);
    var editTask = React.useCallback(function (edited, prevTask) {
        setEditCardPane(false);
        onTaskEdit.call(undefined, edited, prevTask);
    }, [onTaskEdit]);
    var deleteTask = React.useCallback(function (task) {
        onTaskDelete.call(undefined, task);
    }, [onTaskDelete]);
    if (column.isPlaceholder && dragTargetRef && dragTargetRef.current) {
        var width = dragTargetRef.current ? dragTargetRef.current.width : 0;
        var height = dragTargetRef.current ? dragTargetRef.current.height : 0;
        return (React.createElement("div", __assign({ style: { width: width, height: height }, className: 'k-taskboard-column k-taskboard-drag-placeholder' }, (_a = {}, _a[constants_1.TASKBOARD_PLACEHOLDER] = true, _a))));
    }
    return (React.createElement(props.columnComponent, { column: props.column, tasks: tasks, priorities: props.priorities, style: Boolean(dragTargetRef) ? __assign({ overflow: 'visible' }, style) : style, tabIndex: props.tabIndex, elementRef: elementRef, onTaskCreate: onNewTask, onTaskEdit: editTask, onTaskDelete: deleteTask, card: props.cardComponent, header: ColumnHeader_1.TaskBoardColumnHeader, body: ColumnBody_1.TaskBoardColumnBody, confirmDialog: TaskBoardConfirmDialog_1.TaskBoardConfirmDialog, editCardDialog: TaskBoardEditCard_1.TaskBoardEditCard, addCardDialog: TaskBoardAddCard_1.TaskBoardAddCard, onTitleChange: onTitleChange, onColumnEnterEdit: onColumnEnterEdit, onColumnExitEdit: onColumnExitEdit, onColumnConfirmDelete: onConfirmColumnDelete, onShowAddCardDialog: showAddCardDialog, onShowEditCardPane: showEditCardPane, onColumnDelete: onColumnDelete, onCloseDialog: hideCloseModal, showAddCard: addCard, showEditCard: editCardPane, showColumnConfirmDelete: confirmColumnDeleteVisible, editedTask: taskToEdit, confirmDialogMessage: localization.toLanguageString(messages_1.taskBoardDelColumnDialogMsg, messages_1.messages[messages_1.taskBoardDelColumnDialogMsg]), confirmDialogTitle: localization.toLanguageString(messages_1.taskBoardDelColumnDialogTitle, messages_1.messages[messages_1.taskBoardDelColumnDialogTitle]), confirmDialogConfirmButton: localization.toLanguageString(messages_1.taskBoardDelColumnConfirmBtn, messages_1.messages[messages_1.taskBoardDelColumnConfirmBtn]), confirmDialogCancelButton: localization.toLanguageString(messages_1.taskBoardDelColumnCancelBtn, messages_1.messages[messages_1.taskBoardDelColumnCancelBtn]), editButtonTitle: localization.toLanguageString(messages_1.taskBoardEditColumnButton, messages_1.messages[messages_1.taskBoardEditColumnButton]), addButtonTitle: localization.toLanguageString(messages_1.taskBoardAddCardButton, messages_1.messages[messages_1.taskBoardAddCardButton]), closeButtonTitle: localization.toLanguageString(messages_1.taskBoardDeleteColumnButton, messages_1.messages[messages_1.taskBoardDeleteColumnButton]) }, tasks && tasks.map(function (task) {
        return (React.createElement(TaskBoardCardBase_1.TaskBoardCardBase, { key: task.id, tabIndex: props.tabIndex, task: task, disabled: Boolean(props.column.edit), onDeleteTask: function () { return deleteTask(task); }, showEditPane: function () { return showEditCardPane(task); }, dragTargetRef: props.dragTargetRef, style: { borderLeftColor: task.priority.color }, cardComponent: props.cardComponent }));
    })));
};
exports.TaskBoardColumnBase = TaskBoardColumnBase;
var defaultProps = {};
exports.TaskBoardColumnBase.propTypes = {
    column: PropTypes.object.isRequired,
    taskMap: PropTypes.object
};
exports.TaskBoardColumnBase.defaultProps = defaultProps;
exports.TaskBoardColumnBase.displayName = 'KendoReactTaskBoardColumn';
