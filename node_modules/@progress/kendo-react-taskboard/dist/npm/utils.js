"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.valueRender = exports.itemRender = exports.closestTaskBoardElement = exports.findIndexes = void 0;
var React = require("react");
var constants_1 = require("./constants");
/**
 * @hidden
 */
var findIndexes = function (dragId, dropId, taskData) {
    var dropIndex = -1;
    var dragIndex = -1;
    for (var i = 0; i < taskData.length; i++) {
        var currentId = String(taskData[i].id);
        if (currentId === dragId) {
            dragIndex = i;
        }
        if (currentId === dropId) {
            dropIndex = i;
        }
        if (dropIndex !== -1 && dragIndex !== -1) {
            return {
                dragIndex: dragIndex,
                dropIndex: dropIndex
            };
        }
    }
    return null;
};
exports.findIndexes = findIndexes;
/**
 * @hidden
 */
var closestTaskBoardElement = function (node) {
    while (node) {
        if (!node.getAttribute) {
            return null;
        }
        var itemId = node.getAttribute(constants_1.TASKBOARD_ITEM_ID);
        if (itemId) {
            return {
                id: itemId,
                type: node.getAttribute(constants_1.TASKBOARD_ITEM_TYPE) || '',
                element: node
            };
        }
        node = node.parentNode;
    }
    return null;
};
exports.closestTaskBoardElement = closestTaskBoardElement;
/**
 * @hidden
 */
var itemRender = function (li, itemProps) {
    var color = itemProps.dataItem.color;
    var itemChildren = (React.createElement(React.Fragment, null,
        React.createElement("span", { style: { backgroundColor: color } }, "\u00A0"),
        li.props.children));
    return React.cloneElement(li, li.props, itemChildren);
};
exports.itemRender = itemRender;
/**
 * @hidden
 */
var valueRender = function (element, value) {
    if (!value) {
        return element;
    }
    var children = (React.createElement(React.Fragment, null,
        React.createElement("span", { style: { backgroundColor: value.color } }, "\u00A0"),
        React.createElement("span", null,
            React.createElement(React.Fragment, null,
                "\u00A0 ",
                element.props.children))));
    return React.cloneElement(element, __assign({}, element.props), children);
};
exports.valueRender = valueRender;
