var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import createStore from './store/store';
import { observersReducer } from './store/reducer';
import { isOptionsChanged } from './utils/common';
import { BarcodeContext } from './BarcodeContext';
import { validatePackage } from '@progress/kendo-react-common';
import { packageMetadata } from './package-metadata';
/**
 * @hidden
 */
var BaseBarcode = /** @class */ (function (_super) {
    __extends(BaseBarcode, _super);
    function BaseBarcode(props) {
        var _this = _super.call(this, props) || this;
        /**
         * @hidden
         */
        _this.barcodeInstance = null;
        /**
         * @hidden
         */
        _this.surface = null;
        _this._element = null;
        _this.observersStore = {};
        /* DOM event handlers */
        /**
         * @hidden
         */
        _this.onWindowResize = function () {
            if (_this.barcodeInstance !== null) {
                _this.barcodeInstance.redraw();
                _this.trigger('render', { sender: _this });
            }
        };
        validatePackage(packageMetadata);
        _this.observersStore = createStore(observersReducer);
        _this.contextValue = {
            observersStore: _this.observersStore
        };
        return _this;
    }
    Object.defineProperty(BaseBarcode.prototype, "element", {
        /**
         * @hidden
         */
        get: function () {
            return this._element;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    BaseBarcode.prototype.componentDidMount = function () {
        this.instantiateCoreBarcode();
        window.addEventListener('resize', this.onWindowResize);
        this.trigger('render', { sender: this });
    };
    /**
     * @hidden
     */
    BaseBarcode.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, children = _a.children, deriveOptionsFromParent = _a.deriveOptionsFromParent, getTarget = _a.getTarget, barcodeConstructor = _a.barcodeConstructor, className = _a.className, renderAs = _a.renderAs, currentOthers = __rest(_a, ["children", "deriveOptionsFromParent", "getTarget", "barcodeConstructor", "className", "renderAs"]);
        var prevChildren = prevProps.children, prevDeriveOptionsFromParent = prevProps.deriveOptionsFromParent, prevGetTarget = prevProps.getTarget, prevBarcodeConstructor = prevProps.barcodeConstructor, prevClassName = prevProps.className, prevRenderAs = prevProps.renderAs, prevOthers = __rest(prevProps, ["children", "deriveOptionsFromParent", "getTarget", "barcodeConstructor", "className", "renderAs"]);
        if (this.barcodeInstance !== null) {
            var optionsChanged = isOptionsChanged(prevOthers, currentOthers);
            if ((renderAs || 'svg') !== (prevRenderAs || 'svg')) {
                if (this.barcodeInstance !== null) {
                    this.barcodeInstance.destroy();
                    this.barcodeInstance = null;
                }
                this.instantiateCoreBarcode();
            }
            else if (optionsChanged) {
                this.refresh();
            }
            this.trigger('render', { sender: this });
        }
    };
    /**
     * @hidden
     */
    BaseBarcode.prototype.componentWillUnmount = function () {
        if (this.barcodeInstance !== null) {
            this.barcodeInstance.destroy();
            this.barcodeInstance = null;
        }
        window.removeEventListener('resize', this.onWindowResize);
    };
    /**
     * @hidden
     */
    BaseBarcode.prototype.render = function () {
        var _this = this;
        var _a = this.props, _b = _a.style, style = _b === void 0 ? {} : _b, className = _a.className, children = _a.children;
        return (React.createElement(BarcodeContext.Provider, { value: this.contextValue },
            React.createElement("div", { style: style, ref: function (el) { return _this._element = el; }, className: className }, children)));
    };
    /**
     * @hidden
     */
    BaseBarcode.prototype.instantiateCoreBarcode = function () {
        var barcodeConstructor = this.props.barcodeConstructor;
        var barcodeOptions = this.getBarcodeOptions();
        this.barcodeInstance = new barcodeConstructor(this.element, barcodeOptions, function (error) {
            if (process.env.NODE_ENV !== 'production') {
                throw error;
            }
            else {
                console.warn(error);
            }
        });
    };
    /**
     * @hidden
     */
    BaseBarcode.prototype.refresh = function () {
        if (this.barcodeInstance !== null) {
            var barcodeOptions = this.getBarcodeOptions();
            this.barcodeInstance.setOptions(barcodeOptions);
        }
    };
    /**
     * @hidden
     */
    BaseBarcode.prototype.getBarcodeOptions = function () {
        var _a = this.props, renderAs = _a.renderAs, deriveOptionsFromParent = _a.deriveOptionsFromParent;
        var barcodeOptions = { renderAs: renderAs };
        if (deriveOptionsFromParent) {
            // Add options from parent - required by TS
            barcodeOptions = deriveOptionsFromParent(barcodeOptions);
        }
        return barcodeOptions;
    };
    /**
     * @hidden
     */
    BaseBarcode.prototype.trigger = function (name, e) {
        var observers = this.observersStore.getState();
        for (var idx = 0; idx < observers.length; idx++) {
            observers[idx].trigger(name, e);
        }
    };
    /**
     * @hidden
     */
    BaseBarcode.propTypes = {
        dir: PropTypes.string,
        renderAs: PropTypes.oneOf(['svg', 'canvas'])
    };
    /**
     * @hidden
     */
    BaseBarcode.defaultProps = {
        renderAs: 'svg'
    };
    return BaseBarcode;
}(React.Component));
export { BaseBarcode };
