var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { BaseBarcode } from './BaseBarcode';
import { Barcode as KendoBarcode } from '@progress/kendo-charts';
import { exportImage, exportSVG, Group } from '@progress/kendo-drawing';
import { classNames } from '@progress/kendo-react-common';
/**
 * Represents the KendoReact Barcode component.
 */
var Barcode = /** @class */ (function (_super) {
    __extends(Barcode, _super);
    function Barcode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._baseBarcode = null;
        _this.getTarget = function () {
            return _this;
        };
        _this.deriveOptionsFromParent = function (options) {
            return Object.assign({}, options, {
                background: _this.props.background,
                border: _this.props.border,
                checksum: _this.props.checksum,
                color: _this.props.color,
                height: _this.props.height,
                padding: _this.props.padding,
                text: _this.props.text,
                type: _this.props.type,
                value: _this.props.value,
                width: _this.props.width
            });
        };
        return _this;
    }
    Object.defineProperty(Barcode.prototype, "barcodeInstance", {
        /**
         * @hidden
         */
        get: function () {
            if (this._baseBarcode !== null) {
                return this._baseBarcode.barcodeInstance;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Barcode.prototype, "surface", {
        /**
         * The Drawing `Surface` of the Barcode.
         */
        get: function () {
            if (this._baseBarcode !== null) {
                return this._baseBarcode.surface;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Barcode.prototype, "element", {
        /**
         * The DOM element of the Barcode.
         */
        get: function () {
            if (this._baseBarcode !== null) {
                return this._baseBarcode.element;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @hidden
     */
    Barcode.prototype.render = function () {
        var _this = this;
        var _a = this.props, children = _a.children, className = _a.className, baseBarcodeProps = __rest(_a, ["children", "className"]);
        return (React.createElement(BaseBarcode, __assign({}, baseBarcodeProps, { deriveOptionsFromParent: this.deriveOptionsFromParent, ref: function (baseBarcode) { return _this._baseBarcode = baseBarcode; }, barcodeConstructor: KendoBarcode, getTarget: this.getTarget, className: classNames('k-barcode', className) }), children));
    };
    /**
     * Exports the component as an image. The export operation is asynchronous and returns a promise.
     *
     * @param {ImageExportOptions} options - The parameters for the exported image.
     * @returns {Promise<string>} - A promise that will be resolved with a PNG image encoded as a Data URI.
     */
    Barcode.prototype.exportImage = function (options) {
        if (options === void 0) { options = {}; }
        return exportImage(this.exportVisual(), options);
    };
    /**
     * Exports the component as an SVG document. The export operation is asynchronous and returns a promise.
     *
     * @param options - The parameters for the exported file.
     * @returns - A promise that will be resolved with an SVG document that is encoded as a Data URI.
     */
    Barcode.prototype.exportSVG = function (options) {
        if (options === void 0) { options = {}; }
        return exportSVG(this.exportVisual(), options);
    };
    /**
     * Exports a Barcode component as a Drawing `Scene`.
     *
     * @param {any} options - The parameters for the export operation.
     * @returns {Group} - A promise that returns the root `Group` of the scene.
     */
    Barcode.prototype.exportVisual = function (options) {
        if (this.barcodeInstance !== null) {
            return this.barcodeInstance.exportVisual(options);
        }
        return new Group();
    };
    return Barcode;
}(React.Component));
export { Barcode };
