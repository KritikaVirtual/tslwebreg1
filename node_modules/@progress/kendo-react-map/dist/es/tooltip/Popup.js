var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import { InstanceObserver } from '@progress/kendo-charts';
import { hasParent } from '../utils/main';
import { Popup } from '@progress/kendo-react-popup';
import { MapContext } from '../MapContext';
var COLLISION = { horizontal: 'fit', vertical: 'fit' };
var TOOLTIP_CLASSES = ['k-tooltip', 'k-map-tooltip'];
var POPUP_WRAPPER_CLASS = 'k-tooltip-wrapper';
/**
 * @hidden
 */
var TooltipPopup = /** @class */ (function (_super) {
    __extends(TooltipPopup, _super);
    function TooltipPopup(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.context = null;
        _this.element = null;
        _this.onMapMouseLeave = function (e) {
            var syntheticEvent = e.syntheticEvent;
            if (hasParent(syntheticEvent.relatedTarget, _this.element)) {
                /* prevent default behavior so that the tooltip won't be hidden */
                return true;
            }
            return false;
        };
        _this.mapObserver = new InstanceObserver(_this, {
            onMouseLeave: 'onMapMouseLeave'
        });
        context.observersStore.dispatch({
            type: 'add',
            payload: _this.mapObserver
        });
        return _this;
    }
    TooltipPopup.prototype.render = function () {
        var _this = this;
        var _a = this.props, popupShown = _a.popupShown, popupAlign = _a.popupAlign, popupOffset = _a.popupOffset, popupStyles = _a.popupStyles, popupContent = _a.popupContent, className = _a.className;
        var wrapperClass = __spreadArray(__spreadArray([], TOOLTIP_CLASSES, true), [className], false).join(' ').trim();
        var popupComponent = (React.createElement(Popup, { animate: true, popupAlign: popupAlign, offset: popupOffset, show: popupShown, collision: COLLISION, className: POPUP_WRAPPER_CLASS },
            React.createElement("div", { className: wrapperClass, style: popupStyles, ref: function (el) { return _this.element = el; } }, popupContent())));
        return popupComponent;
    };
    TooltipPopup.prototype.componentWillUnmount = function () {
        this.context.observersStore.dispatch({
            type: 'remove',
            payload: this.mapObserver
        });
    };
    TooltipPopup.contextType = MapContext;
    return TooltipPopup;
}(React.Component));
export { TooltipPopup };
