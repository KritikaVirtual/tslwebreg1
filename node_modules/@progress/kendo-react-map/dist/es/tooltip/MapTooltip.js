var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { InstanceObserver } from '@progress/kendo-charts';
import { TooltipPopup } from './Popup';
import { MapContext } from '../MapContext';
/**
 * @hidden
 */
var MapTooltip = /** @class */ (function (_super) {
    __extends(MapTooltip, _super);
    function MapTooltip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.context = null;
        _this.state = {
            popupShown: false
        };
        return _this;
    }
    MapTooltip.prototype.componentDidMount = function () {
        this.mapObserver = new InstanceObserver(this, {
            showTooltip: 'onShowTooltip',
            hideTooltip: 'onHideTooltip'
        });
        this.context.observersStore.dispatch({
            type: 'add',
            payload: this.mapObserver
        });
    };
    MapTooltip.prototype.render = function () {
        var _a = this.state, popupContext = _a.popupContext, shared = _a.shared, className = _a.className, tooltipProps = __rest(_a, ["popupContext", "shared", "className"]);
        if (!popupContext || !this.state.popupShown) {
            // Popup closed.
            return null;
        }
        var layerIndex = popupContext.layerIndex;
        var render = this.findRenderFunctionByLayer(layerIndex);
        if (!render) {
            // No renderer set for layer tooltip.
            return null;
        }
        var tooltipContent = function () { return (React.createElement("div", { className: "k-tooltip-content" }, render(popupContext))); };
        var popupContainerClassName = "k-map-".concat(popupContext.type, "-tooltip");
        return (React.createElement(TooltipPopup, __assign({}, tooltipProps, { popupContent: tooltipContent, className: popupContainerClassName })));
    };
    MapTooltip.prototype.componentWillUnmount = function () {
        this.context.observersStore.dispatch({
            type: 'remove',
            payload: this.mapObserver
        });
    };
    MapTooltip.prototype.onShowTooltip = function (e) {
        var anchor = e.anchor, className = e.className;
        var context = this.createTooltipContext(e);
        this.setState({
            popupShown: true,
            popupAlign: { vertical: 'bottom', horizontal: 'center' },
            popupOffset: anchor,
            popupContext: context,
            popupStyles: { position: 'relative' },
            className: className
        });
    };
    MapTooltip.prototype.onHideTooltip = function () {
        this.setState({
            popupShown: false,
            popupStyles: {},
            className: undefined
        });
    };
    MapTooltip.prototype.createTooltipContext = function (e) {
        return e;
    };
    MapTooltip.prototype.findRenderFunctionByLayer = function (layerIndex) {
        var layers = this.context.optionsStore.getState().layers;
        if (layers !== undefined
            && Array.isArray(layers)
            && layers[layerIndex] !== undefined
            && layers[layerIndex].hasOwnProperty('tooltip')
            && layers[layerIndex].tooltip.hasOwnProperty('render')) {
            return layers[layerIndex].tooltip.render;
        }
        return null;
    };
    MapTooltip.contextType = MapContext;
    return MapTooltip;
}(React.Component));
export { MapTooltip };
