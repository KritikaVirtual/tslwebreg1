import * as React from 'react';
import { MapOptions } from '@progress/kendo-charts';
import { BeforeResetEvent, MapClickEvent, MarkerActivateEvent, MarkerClickEvent, MarkerCreatedEvent, PanEndEvent, PanEvent, ResetEvent, ShapeClickEvent, ShapeCreatedEvent, ShapeFeatureCreatedEvent, ShapeMouseEnterEvent, ShapeMouseLeaveEvent, ZoomEndEvent, ZoomStartEvent } from './common/events';
/**
 * Represents the props of the KendoReact Map component.
 */
export interface MapProps extends MapOptions {
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * The styles that are applied to the component.
     */
    style?: React.CSSProperties;
    /**
     * Sets additional CSS classes to the component.
     */
    className?: string;
    /**
     * @hidden
     */
    children?: any;
    /**
     * Fires when the Map is about to refresh. The event can be used to prevent the refresh of the Map in specific cases.
     */
    onRefresh?: (mapOptions: any, mapInstance: any) => void;
    /**
     * Fired immediately before the map is reset. This event is typically used for cleanup by layer implementers.
     */
    onBeforeReset?: (event: BeforeResetEvent) => void;
    /**
     * Fired when the user clicks on the map.
     */
    onMapClick?: (event: MapClickEvent) => void;
    /**
     * Fired when a marker has been displayed and has a DOM element assigned.
     */
    onMarkerActivate?: (event: MarkerActivateEvent) => void;
    /**
     * Fired when a marker has been clicked or tapped.
     */
    onMarkerClick?: (event: MarkerClickEvent) => void;
    /**
     * Fired when a marker has been created and is about to be displayed.
     *
     * Cancelling the event will prevent the marker from being shown.
     */
    onMarkerCreated?: (event: MarkerCreatedEvent) => void;
    /**
     * Fires after the map viewport has been moved.
     */
    onPanEnd?: (event: PanEndEvent) => void;
    /**
     * Fired while the map viewport is being moved.
     */
    onPan?: (event: PanEvent) => void;
    /**
     * Fired when the map is reset.
     *
     * This typically occurs on initial load and after a zoom/center change.
     */
    onReset?: (event: ResetEvent) => void;
    /**
     * Fired when a shape is clicked or tapped.
     */
    onShapeClick?: (event: ShapeClickEvent) => void;
    /**
     * Fired when a shape is created, but is not rendered yet.
     */
    onShapeCreated?: (event: ShapeCreatedEvent) => void;
    /**
     * Fired when a [GeoJSON Feature](https://geojson.org/geojson-spec.html#feature-objects) is created on a shape layer.
     */
    onShapeFeatureCreated?: (event: ShapeFeatureCreatedEvent) => void;
    /**
     * Fired when the mouse enters a shape.
     *
     * > This event will fire reliably only for shapes that have set fill color.
     * > The opacity can still be set to 0 so the shapes appear to have no fill.
     */
    onShapeMouseEnter?: (event: ShapeMouseEnterEvent) => void;
    /**
     * Fired when the mouse leaves a shape.
     *
     * > This event will fire reliably only for shapes that have set fill color.
     * > The opacity can still be set to 0 so the shapes appear to have no fill.
     */
    onShapeMouseLeave?: (event: ShapeMouseLeaveEvent) => void;
    /**
     * Fired when the map zoom level is about to change.
     *
     * Cancelling the event will prevent the user action.
     */
    onZoomStart?: (event: ZoomStartEvent) => void;
    /**
     * Fired when the map zoom level has changed.
     */
    onZoomEnd?: (event: ZoomEndEvent) => void;
}
