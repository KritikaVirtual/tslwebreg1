import * as React from 'react';
import React__default, { useState, useEffect } from 'react';
import { jsxs, jsx } from 'react/jsx-runtime';

const cachedScripts = [];

function useScript(url, async = true, appendToHeadOrBody = 'head') {
  const [state, setState] = React.useState({
    loaded: false,
    error: false
  });
  React.useEffect(() => {
    if (cachedScripts.includes(url)) {
      setState({
        loaded: true,
        error: false
      });
    } else {
      cachedScripts.push(url);
      const script = document.createElement('script');
      script.src = url;
      script.async = async;

      const onScriptLoad = () => {
        setState({
          loaded: true,
          error: false
        });
      };

      const onScriptError = () => {
        const index = cachedScripts.indexOf(url);
        if (index >= 0) cachedScripts.splice(index, 1);
        script.remove();
        setState({
          loaded: true,
          error: true
        });
      };

      script.addEventListener('load', onScriptLoad);
      script.addEventListener('error', onScriptError);
      appendToHeadOrBody === 'head' ? document.head.appendChild(script) : document.body.appendChild(script);
      return () => {
        script.removeEventListener('load', onScriptLoad);
        script.removeEventListener('error', onScriptError);
      };
    }

    return undefined;
  }, [url, async, appendToHeadOrBody]);
  return [state.loaded, state.error];
}

const useAcceptJs = ({
  environment: _environment = 'SANDBOX',
  authData
}) => {
  const [loading, setLoading] = useState(true);
  const scriptUrl = _environment === 'PRODUCTION' ? 'https://js.authorize.net/v1/Accept.js' : 'https://jstest.authorize.net/v1/Accept.js';
  const [scriptLoaded, scriptError] = useScript(scriptUrl);
  useEffect(() => {
    if (scriptLoaded || scriptError) {
      setLoading(false);
    }
  }, [scriptLoaded, scriptError]);

  const dispatchData = paymentData => {
    const payload = paymentData.cardData ? {
      cardData: paymentData.cardData,
      authData
    } : {
      bankData: paymentData.bankData,
      authData
    };
    return new Promise((resolve, reject) => {
      if (window) {
        window.Accept.dispatchData(payload, response => {
          if (response.messages.resultCode === 'Ok') {
            resolve(response);
          }

          reject(response);
        });
      }
    });
  };

  return {
    dispatchData,
    loading,
    error: scriptError
  };
};

const HostedForm = ({
  authData,
  onSubmit,
  environment: _environment = 'SANDBOX',
  billingAddressOptions: _billingAddressOptions = {
    show: true,
    required: true
  },
  buttonText: _buttonText = 'Pay',
  formButtonText: _formButtonText = 'Pay',
  formHeaderText: _formHeaderText = 'Pay',
  paymentOptions: _paymentOptions = {
    showCreditCard: true,
    showBankAccount: false
  },
  buttonStyle,
  buttonClassName,
  errorTextStyle,
  errorTextClassName,
  containerStyle,
  containerClassName,
  disabled
}) => {
  const [loading, setLoading] = React.useState(true);
  const scriptUrl = _environment === 'PRODUCTION' ? 'https://js.authorize.net/v3/AcceptUI.js' : 'https://jstest.authorize.net/v3/AcceptUI.js';
  const [scriptLoaded, scriptError] = useScript(scriptUrl);
  React.useEffect(() => {
    if (scriptLoaded || scriptError) {
      setLoading(false);
    }
  }, [scriptLoaded, scriptError]);
  const [errors, setErrors] = React.useState(null);
  const responseHandler = React.useCallback(response => {
    if (response.messages.resultCode === 'Error') {
      setErrors(response.messages.message);
    } else {
      onSubmit(response);
    }
  }, [onSubmit]);
  React.useEffect(() => {
    if (!scriptError && !loading && !window.responseHandler) window.responseHandler = responseHandler;
    if (scriptError) setErrors('There was a problem loading the Accept.JS script. Please try again.');
  }, [loading, scriptError, responseHandler]);
  return jsxs("div", {
    style: containerStyle,
    className: containerClassName ? containerClassName : undefined,
    children: [jsx("button", {
      type: "button",
      style: buttonStyle,
      className: buttonClassName ? `AcceptUI ${buttonClassName}` : 'AcceptUI',
      "data-billingaddressoptions": JSON.stringify(_billingAddressOptions),
      "data-apiloginid": authData.apiLoginID,
      "data-clientkey": authData.clientKey,
      "data-acceptuiformbtntxt": _formButtonText,
      "data-acceptuiformheadertxt": _formHeaderText,
      "data-paymentoptions": JSON.stringify(_paymentOptions),
      "data-responsehandler": "responseHandler",
      disabled: scriptError || loading || disabled,
      children: _buttonText
    }), errors && jsx("div", {
      style: errorTextStyle,
      className: errorTextClassName != null ? errorTextClassName : '',
      children: typeof errors === 'string' ? errors : errors.map((error, index) => jsxs("div", {
        children: ["`Error ($", error.code, "): $", error.text, ")`"]
      }, `error-${index}`))
    })]
  });
};

const RedirectIntegration = ({
  formToken,
  postUrl,
  children,
  className,
  style
}) => jsxs("form", {
  method: "post",
  action: postUrl,
  children: [jsx("input", {
    type: "hidden",
    name: "token",
    value: formToken
  }), jsx("button", {
    className: className,
    style: className ? {} : style,
    children: children
  })]
});

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

const parseQueryString = queryString => {
  const arr = queryString.split('&');
  return arr.reduce((acc, curr) => {
    const [key, value] = curr.split('=');
    acc[key] = value;
    return acc;
  }, {});
};

const defaultBackdropStyle = {
  position: 'fixed',
  left: '0px',
  top: '0px',
  width: '100%',
  height: '100%',
  zIndex: 1,
  backgroundColor: '#808080',
  opacity: '0.5',
  filter: 'alpha(opacity=50)'
};
const defaultContainerStyle = {
  borderRadius: '6px',
  position: 'fixed',
  boxShadow: 'rgba(0, 0, 0, 0.4) 5px 5px 16px',
  zIndex: 999999,
  display: 'block',
  overflow: 'hidden',
  left: '50%',
  top: '50%',
  backgroundColor: '#ffffff'
};

function useWindowSize() {
  const [windowSize, setWindowSize] = useState({
    width: undefined,
    height: undefined
  });
  useEffect(() => {
    function handleResize() {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight
      });
    }

    window.addEventListener('resize', handleResize);
    handleResize();
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  return windowSize;
}

const IFrameIntegrationContext = React__default.createContext(null);
const useIFrameIntegrationContext = () => {
  const context = React__default.useContext(IFrameIntegrationContext);

  if (!context) {
    throw new Error(`AcceptHosted compound components cannot be rendered outside the AcceptHosted component`);
  }

  return context;
};
const IFrameIntegration = ({
  formToken,
  postUrl,
  onTransactionResponse,
  onCancel,
  onSuccessfulSave,
  onResize,
  children
}) => {
  const [popupIsShown, setPopupIsShown] = React__default.useState(false);
  const popupFormRef = React__default.useRef(null);
  const popupRef = React__default.useRef(null);
  const iFrameRef = React__default.useRef(null);

  const handleShowPopup = () => {
    setPopupIsShown(true);
  };

  const handleClosePopup = () => {
    setPopupIsShown(false);
  };

  const contextValue = {
    popupIsShown,
    popupFormRef,
    popupRef,
    iFrameRef,
    formToken,
    postUrl,
    handleShowPopup,
    handleClosePopup
  }; // const centerPopup = () => {
  //   if (popupRef.current) {
  //     popupRef.current.style.left = '50%';
  //     popupRef.current.style.top = '50%';
  //     const left = -Math.floor(popupRef.current.clientWidth / 2);
  //     const top = -Math.floor(popupRef.current.clientHeight / 2);
  //     popupRef.current.style.marginLeft = `${left.toString()}px`;
  //     popupRef.current.style.marginTop = `${top.toString()}px`;
  //     popupRef.current.style.zIndex = '2';
  //     if (popupRef.current.offsetLeft < 16) {
  //       popupRef.current.style.left = '16px';
  //       popupRef.current.style.right = '16px';
  //       popupRef.current.style.marginLeft = '0px';
  //     }
  //     if (popupRef.current.offsetTop < 16) {
  //       popupRef.current.style.top = '16px';
  //       popupRef.current.style.marginTop = '0px';
  //     }
  //   }
  // };
  // React.useEffect(() => {
  //   if (popupIsShown) {
  //     centerPopup();
  //   }
  // }, [popupIsShown]);

  React__default.useEffect(() => {
    if (!window.AuthorizeNetIFrame) {
      window.AuthorizeNetIFrame = {
        onReceiveCommunication: querystr => {
          const params = parseQueryString(querystr);

          switch (params['action']) {
            case 'successfulSave':
              if (onSuccessfulSave) onSuccessfulSave();
              handleClosePopup();
              break;

            case 'cancel':
              if (onCancel) onCancel();
              handleClosePopup();
              break;

            case 'transactResponse':
              const response = params['response'];
              let parsedResponse;

              if (response) {
                parsedResponse = JSON.parse(response);
                onTransactionResponse(parsedResponse);
              } else {
                console.error('Did not receive a transaction response despite receiving a transactResponse action!');
              }

              handleClosePopup();
              break;

            case 'resizeWindow':
              const width = params['width'];
              const height = params['height'];

              if (width && height) {
                const w = parseInt(width);
                const h = parseInt(height);

                if (iFrameRef.current && popupRef.current) {
                  iFrameRef.current.style.width = '100%';
                  iFrameRef.current.style.height = `${h.toString()}px`;
                  popupRef.current.style.height = `${h.toString()}px`; // centerPopup();
                }

                if (onResize) onResize(w, h);
              }

              break;
          }
        }
      };
    }
  });
  return jsx(IFrameIntegrationContext.Provider, {
    value: contextValue,
    children: children
  });
};
const IFrameIntegrationButton = ({
  children,
  className
}) => {
  const {
    postUrl,
    handleShowPopup,
    formToken,
    popupIsShown
  } = useIFrameIntegrationContext();
  return jsxs("form", {
    method: "post",
    action: postUrl,
    id: "formAuthorizeNetPopup",
    name: "formAuthorizeNetPopup",
    target: "iframeAuthorizeNet",
    onSubmit: handleShowPopup,
    children: [jsx("input", {
      type: "hidden",
      id: "popupToken",
      name: "token",
      value: formToken
    }), jsx("button", {
      disabled: popupIsShown,
      className: className,
      children: children
    })]
  });
};
const IFrameContainer = ({
  children,
  className,
  style
}) => {
  const {
    popupIsShown,
    popupRef
  } = useIFrameIntegrationContext();
  const windowSize = useWindowSize();
  const [offsetWidth, setOffsetWidth] = React__default.useState(0);
  const [offsetHeight, setOffsetHeight] = React__default.useState(0); // React.useEffect(() => {
  //   if (popupIsShown) {
  //     debugger;
  //   }
  // }, [popupIsShown]);

  React__default.useEffect(() => {
    var _popupRef$current, _popupRef$current2;

    setOffsetWidth(Math.floor((((_popupRef$current = popupRef.current) == null ? void 0 : _popupRef$current.clientWidth) || 0) / 2));
    setOffsetHeight(Math.floor((((_popupRef$current2 = popupRef.current) == null ? void 0 : _popupRef$current2.clientHeight) || 0) / 2));
  }, [popupRef]);
  return jsx("div", {
    className: className,
    ref: popupRef,
    style: className ? {
      display: popupIsShown ? '' : 'none'
    } : _extends({}, defaultContainerStyle, style, {
      display: popupIsShown ? '' : 'none',
      width: windowSize.width ? windowSize.width > 576 ? '70%' : '300px' : '300px',
      height: '90%',
      marginLeft: `-${offsetWidth}px`,
      marginTop: `-${offsetHeight}px`
    }),
    children: children
  });
};
const IFrameBackdrop = ({
  className,
  style
}) => {
  const {
    popupIsShown
  } = useIFrameIntegrationContext();
  return jsx("div", {
    className: className,
    style: className ? {
      display: popupIsShown ? '' : 'none'
    } : _extends({}, defaultBackdropStyle, style, {
      display: popupIsShown ? '' : 'none'
    })
  });
};
const IFrame = ({
  className,
  style
}) => {
  return jsx("iframe", {
    name: "iframeAuthorizeNet",
    id: "iframeAuthorizeNet",
    frameBorder: "0",
    scrolling: "no",
    width: "100%",
    height: "100%",
    className: className,
    style: className ? {} : style
  });
};

const AcceptHosted = props => {
  const postUrl = props.environment === 'PRODUCTION' ? 'https://accept.authorize.net/payment/payment' : 'https://test.authorize.net/payment/payment';

  if (props.integration === 'redirect') {
    return jsx(RedirectIntegration, {
      formToken: props.formToken,
      postUrl: postUrl,
      children: props.children
    });
  }

  if (props.integration === 'iframe') {
    return jsx(IFrameIntegration, {
      formToken: props.formToken,
      postUrl: postUrl,
      onTransactionResponse: props.onTransactionResponse,
      onCancel: props.onCancel,
      onResize: props.onResize,
      onSuccessfulSave: props.onSuccessfulSave,
      children: props.children
    });
  }

  return null;
};

AcceptHosted.Button = IFrameIntegrationButton;
AcceptHosted.IFrameContainer = IFrameContainer;
AcceptHosted.IFrameBackdrop = IFrameBackdrop;
AcceptHosted.IFrame = IFrame;

export { AcceptHosted, HostedForm, useAcceptJs };
//# sourceMappingURL=index.modern.mjs.map
